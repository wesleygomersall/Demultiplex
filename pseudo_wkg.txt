#!/usr/bin/env python

import 

argparse input: 
    R1_FILE
    R2_FILE
    R3_FILE
    R4_FILE
    INDEXES (this will have a header line)

functions to make: 
   def rev_complement(seq: str)-> revcomp: str:
	"""Returns the reverse complement of a DNA sequence"""
	input: "ACTGTGACA"
	expected output: "TGTCACAGT"
	return revcomp  
   def check_n_bases(seq: str) -> nbases: bool: 
	"""checks if there is an 'N' in a DNA sequence""""
	input: "ACTGTGACA"
	expected output: False
	input 2: "ACTGTCANA"
	expected output 2: True
	return nbases
   def mean_qual(quals: str) -> meanq: float: 
	"""calculates mean quality of a quality score string""" 
	input: "FFHH"
	expected output: 38.0 
	return meanq

#Read through INDEXES, create a list of the 24 seqs named all_indexes
all_indexes = [] 
index_seq = dict()
with open(INDEXES, 'r') as fin:
    for line in fin: 
        skip the first line of headers
        sixth? column is the string I wanna grab
        append this to all_indexes
        create dicitonary: key is sixth col: index sequence, value is fifth col: index
        # use this to go between sequences below to index names (they look nicer and are easier to refer to)
        # this was an afterthought so don't hate me if this is a janky method, 
        # originally I was only gonna use the index sequences for appending to headers
        # and for file names. 



my_silly_little_dictionary = dict()
my_serious_large_dictionary = dict()
third_dict = dict() 
matched_list = []

for ind1 in all_indexes:
    for ind2 in all_indexes: 
        cooltuple = (ind1, bioinfo.rev_complement(ind2))
        make cooltuple a key of my_silly_little_dictionary, default value = 0
        wonderful_string = index_seq value for (ind1) + ":" + index_seq value for (ind2) # these are sequences
        make cooltuple a key of my_serious_large_dictionary, default value = wonderful_string
        third_dict: index sequence as key and "index" as value (for naming files: B1, A5, etc.)
        if ind1 == ind2 #match indexes
            matched_list.append(cooltuple)

#this way I do not need to reverse complement every single seq in R3_FILE!

#increment values of silly_little_dictionary whenever a read is identified to have indexes matching a tuple in keys
#serious_large_dictionary is for adding strings to the FASTQ headers and output file naming
#matched_list to check if a pair of indexes is a match (Rev.Comp. this for checking against R3)

hop_count = 0
unk_count = 0 

loop through all 4:     R1_FILE R2_FILE R3_FILE R4_FILE
    read 4 lines @ a time from each file (store 12 lines, 4 each from R1 and R4, and index lines + their quality scores)
    (I dont think I need the '+' lines actually)
    
   
    Loop through the quality sequence, get the mean (?) quality of each index. Also check for 'N' bases. 
 
    if 1: either index has low mean quality and or 'N base -> unknown indexes
 
    unk_count += 1
        #write to files unknown_R1.fq, unknown_R2.fq
        fileoutname: str = 'unknown'

    if 2: match pair in my_silly_little_dictionary (either match pair or hopped)
    Increment value for key

        if indexes in matchedlist # match pair
            get name of file a.k.a. the string I stored in this value: dictionary: my_serious_large_dictionary
            fileoutname: str = ?
        if not in matched_list, then it is a hopped index
            fileoutname: str = 'hopped'
            hop_count += 1

    else: 
        nothing should land here, return error
        fileoutname = 'error'

    I should have a bool at this point to know if the read is dual-indexed or not. 
    append the values from my_serious_large_dictionary keys to the headers
    ###IMPORTANT the second index must be reverse complement of what is in R3 file. 
        It should be very easy to append indexes if dual indexed. 
        I do not have to call reverse ecomplement function when I already know that the read is dual-indexed.
        Just write the forward index twice.  
        HOWEVER If not dual indexed (1-2% of reads) then I will need to handle this.
        In this case, calling the rev complement function is unavoidable. 

    write R1 to <filoutname>_R1.fq and write R4 <filoutname>_R2.fq

# print some stuff to standard output 
print out the dictionary..
    first loop through list of dual match tuples. I only care about the values for those keys
    Those values are the reads which were dual matched with those ones. 
print out hop_count, unk_count

print out the possible matches. loop though list of all index matches: 
for ind1 in all_indexes:
    for ind2 in all_indexes: 
        print(value method for dictionary with key (ind1, ind2)
